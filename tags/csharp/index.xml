<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csharp on Jae Logan</title>
    <link>https://jrliv.com/tags/csharp/</link>
    <description>Recent content in Csharp on Jae Logan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license.</copyright>
    <lastBuildDate>Fri, 12 Jan 2018 12:33:38 -0400</lastBuildDate>
    
	<atom:link href="https://jrliv.com/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Comparison Operators in C#</title>
      <link>https://jrliv.com/post/comparison-operators/</link>
      <pubDate>Fri, 12 Jan 2018 12:33:38 -0400</pubDate>
      
      <guid>https://jrliv.com/post/comparison-operators/</guid>
      <description>Comparison operators are used to compare two operands and return a Boolean result (true or false). They can be used to control the flow of a program by determining if the execution of a conditional statement or loop should stop or continue based on the result of the comparison.
Comparison operators are also known as relational operators, as they define the relation between two operands when used.
If you aren&amp;rsquo;t generally familiar with operators and precedence in programming, then I suggest that you check out my blog post on Working with Operators in C#.</description>
    </item>
    
    <item>
      <title>Bitwise Operators in C#</title>
      <link>https://jrliv.com/post/bitwise-operators/</link>
      <pubDate>Fri, 20 Oct 2017 09:06:00 -0400</pubDate>
      
      <guid>https://jrliv.com/post/bitwise-operators/</guid>
      <description>Bitwise operators perform calculations on binary numbers. If you don&amp;rsquo;t know what binary numbers are, they are a series of ones and zeros that represent numerical data. For example, the number 20 is represented as 00010100 in binary. All data in computers are represented by the binary numeral system.
I plan on writing a post in the future about numeral systems but for now, if you want to learn more there are tons of other articles and resources all over the Internet that you can read and use to learn about the binary numeral system.</description>
    </item>
    
    <item>
      <title>Logical Operators in C#</title>
      <link>https://jrliv.com/post/logical-operators/</link>
      <pubDate>Fri, 06 Oct 2017 22:36:44 -0400</pubDate>
      
      <guid>https://jrliv.com/post/logical-operators/</guid>
      <description>Logical operators (also known as Boolean or conditional operators) usually compare two or more conditions and return a Boolean result (true or false). They must be used on boolean type operands or variables. They are widely used in C# programming and very useful when comparing more than one condition.
If you aren&amp;rsquo;t generally familiar with operators and precedence in programming, then I suggest that you check out my blog post on Working with Operators in C#.</description>
    </item>
    
    <item>
      <title>Arithmetic Operators in C#</title>
      <link>https://jrliv.com/post/arithmetic-operators/</link>
      <pubDate>Mon, 25 Sep 2017 08:16:41 -0400</pubDate>
      
      <guid>https://jrliv.com/post/arithmetic-operators/</guid>
      <description>Arithmetic operators are the most common operators used in programming. They perform mathematical operations on numerical values and return a numerical result. They are the same signs and operations that are used in math and everyday life.
If you aren&amp;rsquo;t generally familiar with operators and precedence in programming, then I suggest that you check out my blog post on Working with Operators in C#.
Here are the arithmetic operators used in C#:</description>
    </item>
    
    <item>
      <title>Working with Operators in C#</title>
      <link>https://jrliv.com/post/working-with-operators/</link>
      <pubDate>Wed, 20 Sep 2017 12:39:58 -0400</pubDate>
      
      <guid>https://jrliv.com/post/working-with-operators/</guid>
      <description>Working with operators is an important part of learning how to program. Every programming language uses operators. You will need to use them in essentially every program you write. Therefore every programmer will have to learn how to use them.
In this post I will write about operators in C# and show examples of how to work with some of them.
What is an operator? An operator is a special character that allows you to process and perform different mathematical or logical operations on data types and objects.</description>
    </item>
    
    <item>
      <title>Working with Variables in C#</title>
      <link>https://jrliv.com/post/working-with-variables/</link>
      <pubDate>Sun, 18 Jun 2017 22:26:28 -0400</pubDate>
      
      <guid>https://jrliv.com/post/working-with-variables/</guid>
      <description>One of the first things most new programmers learn how to do is work with variables. In this post I will discuss the different types of variables in C# and describe what they are, why they are used, and how to use them.
If you are already setup with Visual Studio or MonoDevelop on your computer, you can follow along with the post and run or modify the code snippets on your own.</description>
    </item>
    
    <item>
      <title>Get Started Using C# Without Visual Studio</title>
      <link>https://jrliv.com/post/get-started-using-csharp-without-visual-studio/</link>
      <pubDate>Sun, 28 May 2017 17:22:19 -0400</pubDate>
      
      <guid>https://jrliv.com/post/get-started-using-csharp-without-visual-studio/</guid>
      <description>This post will show you how to get started using the C# programming language without installing Visual Studio or any other IDE. C# is a great programming language to learn for anyone new to programming.
Regardless of the language, most fundamentals behind programming can be practiced and learned using only a text editor and the command line. Using the command line to compile and run code provides a faster way for new programmers to get going.</description>
    </item>
    
  </channel>
</rss>